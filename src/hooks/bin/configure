#!/bin/sh

# Supported keys:
# - ports.http (integer)
#   Port on which the snap will listen for HTTP traffic.
#
# - ports.https (integer)
#   Port on which the snap will listen for HTTPS traffic (only applies if HTTPS
#   is enabled).
#
# - php.memory-limit (string)
#   Memory limit for PHP workers or -1 to set unlimited. String can include
#   units, e.g. 32M is 32 megabytes.
#
# - php.max-execution-time (string)
#   Max execution time for PHP workers in seconds or -1 to set unlimited.
#
# - php.max-input-time (string)
#   Max input time for PHP workers in seconds or -1 to set unlimited.
#
# - php.post-max-size (string)
#   Max post size for PHP workers. String can include units, e.g.
#   8M is 8 megabytes.
#
# - php.upload-max-filesize (string)
#   Upload max filesize for PHP workers. String can include units, e.g.
#   2M is 2 megabytes.
#
# - nextcloud.cron-interval (string)
#   Interval of the internal Nextcloud cronjob
#

# shellcheck source=src/apache/utilities/apache-utilities
. "$SNAP/utilities/apache-utilities"
# shellcheck source=src/php/utilities/php-utilities
. "$SNAP/utilities/php-utilities"
# shellcheck source=src/nextcloud/utilities/nextcloud-utilities
. "$SNAP/utilities/nextcloud-utilities"
# shellcheck source=src/hooks/utilities/configuration-utilities
. "$SNAP/utilities/configuration-utilities"

handle_apache_port_config()
{
	http_port="$(apache_http_port)"
	https_port="$(apache_https_port)"
	previous_http_port="$(apache_previous_http_port)"
	previous_https_port="$(apache_previous_https_port)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$http_port" = "$previous_http_port" ] && [ "$https_port" = "$previous_https_port" ]; then
		return 0
	fi

	# Validate HTTP port
	if ! expr "$http_port" : '^[0-9]\+$' > /dev/null; then
		echo "\"$http_port\" is not a valid HTTP port" >&2
		return 1
	fi

	# Validate HTTPS port
	if ! expr "$https_port" : '^[0-9]\+$' > /dev/null; then
		echo "\"$https_port\" is not a valid HTTPS port" >&2
		return 1
	fi

	# Set new values. Since snapctl only gives us new values, also keep track
	# of the current values so we know when they change.
	apache_set_http_port "$http_port"
	apache_set_https_port "$https_port"
	apache_set_previous_http_port "$http_port"
	apache_set_previous_https_port "$https_port"

	# Restart Apache to apply new config
	snapctl restart nextcloud.apache
}

handle_php_memory_limit()
{
	memory_limit="$(php_memory_limit)"
	previous_memory_limit="$(php_previous_memory_limit)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$memory_limit" = "$previous_memory_limit" ]; then
		return 0
	fi

	# Validate memory limit. -1, raw bytes, and K/M/G shorthand allowed.
	if ! expr "$memory_limit" : '^-\?[0-9]\+[KMG]\?$' > /dev/null; then
		echo "\"$memory_limit\" is not a valid PHP memory limit" >&2
		return 1
	fi

	# Set new value. Since snapctl only gives us new values, also keep track of
	# the current value so we know when it changes.
	php_set_memory_limit "$memory_limit"
	php_set_previous_memory_limit "$memory_limit"

	# Restart PHP to apply new config
	snapctl restart nextcloud.php-fpm
}

handle_php_max_execution_time()
{
	max_execution_time="$(php_max_execution_time)"
	previous_max_execution_time="$(php_previous_max_execution_time)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$max_execution_time" = "$previous_max_execution_time" ]; then
		return 0
	fi

	# Validate max execution time. -1 and raw seconds allowed.
	if ! expr "$max_execution_time" : '^-\?[0-9]\+\?$' > /dev/null; then
		echo "\"$max_execution_time\" is not a valid PHP max execution time" >&2
		return 1
	fi

	# Set new value. Since snapctl only gives us new values, also keep track of
	# the current value so we know when it changes.
	php_set_max_execution_time "$max_execution_time"
	php_set_previous_max_execution_time "$max_execution_time"

	# Restart PHP to apply new config
	snapctl restart nextcloud.php-fpm
}

handle_php_max_input_time()
{
	max_input_time="$(php_max_input_time)"
	previous_max_input_time="$(php_previous_max_input_time)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$max_input_time" = "$previous_max_input_time" ]; then
		return 0
	fi

	# Validate max input time. -1 and raw seconds allowed.
	if ! expr "$max_input_time" : '^-\?[0-9]\+\?$' > /dev/null; then
		echo "\"$max_input_time\" is not a valid PHP max input time" >&2
		return 1
	fi

	# Set new value. Since snapctl only gives us new values, also keep track of
	# the current value so we know when it changes.
	php_set_max_input_time "$max_input_time"
	php_set_previous_max_input_time "$max_input_time"

	# Restart PHP to apply new config
	snapctl restart nextcloud.php-fpm
}

handle_php_post_max_size()
{
	post_max_size="$(php_post_max_size)"
	previous_post_max_size="$(php_previous_post_max_size)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$post_max_size" = "$previous_post_max_size" ]; then
		return 0
	fi

	# Validate post max size. raw bytes, and K/M/G shorthand allowed.
	if ! expr "$post_max_size" : '^[0-9]\+[KMG]\?$' > /dev/null; then
		echo "\"$post_max_size\" is not a valid PHP post max size" >&2
		return 1
	fi

	# Set new value. Since snapctl only gives us new values, also keep track of
	# the current value so we know when it changes.
	php_set_post_max_size "$post_max_size"
	php_set_previous_post_max_size "$post_max_size"

	# Restart PHP to apply new config
	snapctl restart nextcloud.php-fpm
}

handle_php_upload_max_filesize()
{
	upload_max_filesize="$(php_upload_max_filesize)"
	previous_upload_max_filesize="$(php_previous_upload_max_filesize)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$upload_max_filesize" = "$previous_upload_max_filesize" ]; then
		return 0
	fi

	# Validate upload max filesize. raw bytes, and K/M/G shorthand allowed.
	if ! expr "$upload_max_filesize" : '^[0-9]\+[KMG]\?$' > /dev/null; then
		echo "\"$upload_max_filesize\" is not a valid PHP upload max filesize" >&2
		return 1
	fi

	# Set new value. Since snapctl only gives us new values, also keep track of
	# the current value so we know when it changes.
	php_set_upload_max_filesize "$upload_max_filesize"
	php_set_previous_upload_max_filesize "$upload_max_filesize"

	# Restart PHP to apply new config
	snapctl restart nextcloud.php-fpm
}

handle_cronjob_interval()
{
	interval="$(cronjob_interval)"
	previous_interval="$(previous_cronjob_interval)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$interval" = "$previous_interval" ]; then
		return 0
	fi

	# Validate time interval seconds (s), minutes (m), hours (h), "-1" or no specified type(by default seconds) are allowed
	if ! expr "$interval" : '^\(\(\([0-9]*\.\)\?[0-9]\+[smhd]\?\)\|\(\-1\)\)$' > /dev/null; then
		echo "\"$interval\" is not a valid timespan" >&2
		return 1
	fi

	# Set new value. Since snapctl only gives us new values, also keep track of
	# the current value so we know when it changes.
	set_cronjob_interval "$interval"
	set_previous_cronjob_interval "$interval"

	# Restart cronjob to apply new config
	snapctl restart nextcloud.nextcloud-cron
}

handle_mode()
{
	# If no changes were requested, then there's nothing to do here.
	if ! mode_has_changed; then
		return 0
	fi

	if debug_mode_enabled; then
		enable_debug_mode
	elif production_mode_enabled; then
		enable_production_mode
	else
		echo "mode must be either 'debug' or 'production'"
		return 1
	fi

	# Restart all affected services. As of now that's Apache and PHP.
	snapctl restart nextcloud.apache
	snapctl restart nextcloud.php-fpm
}

handle_apache_port_config && \
handle_php_memory_limit && \
handle_php_max_execution_time && \
handle_php_max_input_time && \
handle_php_post_max_size && \
handle_php_upload_max_filesize && \
handle_cronjob_interval && \
handle_mode
